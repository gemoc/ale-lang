/*******************************************************************************
 * Copyright (c) 2017 Inria and Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Inria - initial API and implementation
 *
 * generated by Xtext 2.14.0
 *******************************************************************************/
package org.eclipse.emf.ecoretools.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AleGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameRQualifiedParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsRImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cServicesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cServicesRServiceParserRuleCall_4_0 = (RuleCall)cServicesAssignment_4.eContents().get(0);
		private final Assignment cXtendedClassesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXtendedClassesRClassParserRuleCall_5_0 = (RuleCall)cXtendedClassesAssignment_5.eContents().get(0);
		
		///*****************
		// *  ALE grammar  *
		// *****************/ rRoot Unit:
		//	'behavior' name=rQualified ';' imports+=rImport* services+=rService* xtendedClasses+=rClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//'behavior' name=rQualified ';' imports+=rImport* services+=rService* xtendedClasses+=rClass*
		public Group getGroup() { return cGroup; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=rQualified
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//rQualified
		public RuleCall getNameRQualifiedParserRuleCall_1_0() { return cNameRQualifiedParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//imports+=rImport*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//rImport
		public RuleCall getImportsRImportParserRuleCall_3_0() { return cImportsRImportParserRuleCall_3_0; }
		
		//services+=rService*
		public Assignment getServicesAssignment_4() { return cServicesAssignment_4; }
		
		//rService
		public RuleCall getServicesRServiceParserRuleCall_4_0() { return cServicesRServiceParserRuleCall_4_0; }
		
		//xtendedClasses+=rClass*
		public Assignment getXtendedClassesAssignment_5() { return cXtendedClassesAssignment_5; }
		
		//rClass
		public RuleCall getXtendedClassesRClassParserRuleCall_5_0() { return cXtendedClassesRClassParserRuleCall_5_0; }
	}
	public class RImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameRQualifiedParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasIdentTerminalRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//rImport Import:
		//	'import' name=rQualified 'as' alias=Ident ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=rQualified 'as' alias=Ident ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=rQualified
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//rQualified
		public RuleCall getNameRQualifiedParserRuleCall_1_0() { return cNameRQualifiedParserRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//alias=Ident
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }
		
		//Ident
		public RuleCall getAliasIdentTerminalRuleCall_3_0() { return cAliasIdentTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameRQualifiedParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//rService Service:
		//	'use' name=rQualified ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'use' name=rQualified ';'
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//name=rQualified
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//rQualified
		public RuleCall getNameRQualifiedParserRuleCall_1_0() { return cNameRQualifiedParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class RClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cROpenClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRNewClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rClass BehavioredClass:
		//	rOpenClass | rNewClass;
		@Override public ParserRule getRule() { return rule; }
		
		//rOpenClass | rNewClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rOpenClass
		public RuleCall getROpenClassParserRuleCall_0() { return cROpenClassParserRuleCall_0; }
		
		//rNewClass
		public RuleCall getRNewClassParserRuleCall_1() { return cRNewClassParserRuleCall_1; }
	}
	public class ROpenClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rOpenClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameRQualifiedParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsRQualifiedParserRuleCall_3_1_0 = (RuleCall)cExtendsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cExtendsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cExtendsRQualifiedParserRuleCall_3_2_1_0 = (RuleCall)cExtendsAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesRAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Assignment cOperationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperationsROperationParserRuleCall_6_0 = (RuleCall)cOperationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//rOpenClass ExtendedClass:
		//	'open' 'class' name=rQualified ('extends' extends+=rQualified (',' extends+=rQualified)*)? '{' attributes+=rAttribute*
		//	operations+=rOperation* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'open' 'class' name=rQualified ('extends' extends+=rQualified (',' extends+=rQualified)*)? '{' attributes+=rAttribute*
		//operations+=rOperation* '}'
		public Group getGroup() { return cGroup; }
		
		//'open'
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=rQualified
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//rQualified
		public RuleCall getNameRQualifiedParserRuleCall_2_0() { return cNameRQualifiedParserRuleCall_2_0; }
		
		//('extends' extends+=rQualified (',' extends+=rQualified)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//extends+=rQualified
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }
		
		//rQualified
		public RuleCall getExtendsRQualifiedParserRuleCall_3_1_0() { return cExtendsRQualifiedParserRuleCall_3_1_0; }
		
		//(',' extends+=rQualified)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//extends+=rQualified
		public Assignment getExtendsAssignment_3_2_1() { return cExtendsAssignment_3_2_1; }
		
		//rQualified
		public RuleCall getExtendsRQualifiedParserRuleCall_3_2_1_0() { return cExtendsRQualifiedParserRuleCall_3_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//attributes+=rAttribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//rAttribute
		public RuleCall getAttributesRAttributeParserRuleCall_5_0() { return cAttributesRAttributeParserRuleCall_5_0; }
		
		//operations+=rOperation*
		public Assignment getOperationsAssignment_6() { return cOperationsAssignment_6; }
		
		//rOperation
		public RuleCall getOperationsROperationParserRuleCall_6_0() { return cOperationsROperationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RNewClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rNewClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesRAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsROperationParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//rNewClass RuntimeClass:
		//	'class' name=Ident '{' attributes+=rAttribute* operations+=rOperation* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=Ident '{' attributes+=rAttribute* operations+=rOperation* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=Ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=rAttribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//rAttribute
		public RuleCall getAttributesRAttributeParserRuleCall_3_0() { return cAttributesRAttributeParserRuleCall_3_0; }
		
		//operations+=rOperation*
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//rOperation
		public RuleCall getOperationsROperationParserRuleCall_4_0() { return cOperationsROperationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ROperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagRTagParserRuleCall_0_0 = (RuleCall)cTagAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDefKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOverrideKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIdentTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsRVariableParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsRVariableParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyRBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//rOperation Operation:
		//	tag+=rTag* ('def' | 'override') type=rType name=Ident '(' (params+=rVariable (',' params+=rVariable)*)? ')'
		//	body=rBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//tag+=rTag* ('def' | 'override') type=rType name=Ident '(' (params+=rVariable (',' params+=rVariable)*)? ')' body=rBlock
		public Group getGroup() { return cGroup; }
		
		//tag+=rTag*
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//rTag
		public RuleCall getTagRTagParserRuleCall_0_0() { return cTagRTagParserRuleCall_0_0; }
		
		//'def' | 'override'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'def'
		public Keyword getDefKeyword_1_0() { return cDefKeyword_1_0; }
		
		//'override'
		public Keyword getOverrideKeyword_1_1() { return cOverrideKeyword_1_1; }
		
		//type=rType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//rType
		public RuleCall getTypeRTypeParserRuleCall_2_0() { return cTypeRTypeParserRuleCall_2_0; }
		
		//name=Ident
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_3_0() { return cNameIdentTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(params+=rVariable (',' params+=rVariable)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//params+=rVariable
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }
		
		//rVariable
		public RuleCall getParamsRVariableParserRuleCall_5_0_0() { return cParamsRVariableParserRuleCall_5_0_0; }
		
		//(',' params+=rVariable)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//params+=rVariable
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }
		
		//rVariable
		public RuleCall getParamsRVariableParserRuleCall_5_1_1_0() { return cParamsRVariableParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//body=rBlock
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//rBlock
		public RuleCall getBodyRBlockParserRuleCall_7_0() { return cBodyRBlockParserRuleCall_7_0; }
	}
	public class RTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//rTag Tag:
		//	'@' name=Ident;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=Ident
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=Ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
	}
	public class RVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//rVariable Variable:
		//	type=rType name=Ident;
		@Override public ParserRule getRule() { return rule; }
		
		//type=rType name=Ident
		public Group getGroup() { return cGroup; }
		
		//type=rType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//rType
		public RuleCall getTypeRTypeParserRuleCall_0_0() { return cTypeRTypeParserRuleCall_0_0; }
		
		//name=Ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
	}
	public class RAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModifierAlternatives_0_0 = (Alternatives)cModifierAssignment_0.eContents().get(0);
		private final Keyword cModifierContainsKeyword_0_0_0 = (Keyword)cModifierAlternatives_0_0.eContents().get(0);
		private final Keyword cModifierUniqueKeyword_0_0_1 = (Keyword)cModifierAlternatives_0_0.eContents().get(1);
		private final Assignment cBoundsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoundsRCardinalityParserRuleCall_1_0 = (RuleCall)cBoundsAssignment_1.eContents().get(0);
		private final Assignment cOppositeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOppositeROppositeParserRuleCall_2_0 = (RuleCall)cOppositeAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIdentTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpRExpressionParserRuleCall_5_1_0 = (RuleCall)cExpAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//rAttribute Attribute:
		//	modifier=('contains' | 'unique')? bounds=rCardinality? opposite=rOpposite? type=rType name=Ident (':='
		//	exp=rExpression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=('contains' | 'unique')? bounds=rCardinality? opposite=rOpposite? type=rType name=Ident (':=' exp=rExpression)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//modifier=('contains' | 'unique')?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//('contains' | 'unique')
		public Alternatives getModifierAlternatives_0_0() { return cModifierAlternatives_0_0; }
		
		//'contains'
		public Keyword getModifierContainsKeyword_0_0_0() { return cModifierContainsKeyword_0_0_0; }
		
		//'unique'
		public Keyword getModifierUniqueKeyword_0_0_1() { return cModifierUniqueKeyword_0_0_1; }
		
		//bounds=rCardinality?
		public Assignment getBoundsAssignment_1() { return cBoundsAssignment_1; }
		
		//rCardinality
		public RuleCall getBoundsRCardinalityParserRuleCall_1_0() { return cBoundsRCardinalityParserRuleCall_1_0; }
		
		//opposite=rOpposite?
		public Assignment getOppositeAssignment_2() { return cOppositeAssignment_2; }
		
		//rOpposite
		public RuleCall getOppositeROppositeParserRuleCall_2_0() { return cOppositeROppositeParserRuleCall_2_0; }
		
		//type=rType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//rType
		public RuleCall getTypeRTypeParserRuleCall_3_0() { return cTypeRTypeParserRuleCall_3_0; }
		
		//name=Ident
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_4_0() { return cNameIdentTerminalRuleCall_4_0; }
		
		//(':=' exp=rExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_5_0() { return cColonEqualsSignKeyword_5_0; }
		
		//exp=rExpression
		public Assignment getExpAssignment_5_1() { return cExpAssignment_5_1; }
		
		//rExpression
		public RuleCall getExpRExpressionParserRuleCall_5_1_0() { return cExpRExpressionParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class RCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cMultOpTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//rCardinality:
		//	INT '..' (INT | MultOp);
		@Override public ParserRule getRule() { return rule; }
		
		//INT '..' (INT | MultOp)
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//INT | MultOp
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//MultOp
		public RuleCall getMultOpTerminalRuleCall_2_1() { return cMultOpTerminalRuleCall_2_1; }
	}
	public class ROppositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rOpposite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOppositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//rOpposite:
		//	'opposite' name=Ident;
		@Override public ParserRule getRule() { return rule; }
		
		//'opposite' name=Ident
		public Group getGroup() { return cGroup; }
		
		//'opposite'
		public Keyword getOppositeKeyword_0() { return cOppositeKeyword_0; }
		
		//name=Ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
	}
	public class RSimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rSimpleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRInsertParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRRemoveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//rSimpleStatement Statement:
		//	rVarDecl
		//	| rAssign
		//	| rInsert
		//	| rRemove
		//	| rExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//rVarDecl | rAssign | rInsert | rRemove | rExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rVarDecl
		public RuleCall getRVarDeclParserRuleCall_0() { return cRVarDeclParserRuleCall_0; }
		
		//rAssign
		public RuleCall getRAssignParserRuleCall_1() { return cRAssignParserRuleCall_1; }
		
		//rInsert
		public RuleCall getRInsertParserRuleCall_2() { return cRInsertParserRuleCall_2; }
		
		//rRemove
		public RuleCall getRRemoveParserRuleCall_3() { return cRRemoveParserRuleCall_3; }
		
		//rExpression
		public RuleCall getRExpressionParserRuleCall_4() { return cRExpressionParserRuleCall_4; }
	}
	public class RBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRForEachParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//rBlockStatement Statement:
		//	rForEach
		//	| rWhile
		//	| rIf;
		@Override public ParserRule getRule() { return rule; }
		
		//rForEach | rWhile | rIf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rForEach
		public RuleCall getRForEachParserRuleCall_0() { return cRForEachParserRuleCall_0; }
		
		//rWhile
		public RuleCall getRWhileParserRuleCall_1() { return cRWhileParserRuleCall_1; }
		
		//rIf
		public RuleCall getRIfParserRuleCall_2() { return cRIfParserRuleCall_2; }
	}
	public class RVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpRExpressionParserRuleCall_2_1_0 = (RuleCall)cExpAssignment_2_1.eContents().get(0);
		
		//rVarDecl VarDecl:
		//	type=rType name=Ident (':=' exp=rExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=rType name=Ident (':=' exp=rExpression)?
		public Group getGroup() { return cGroup; }
		
		//type=rType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//rType
		public RuleCall getTypeRTypeParserRuleCall_0_0() { return cTypeRTypeParserRuleCall_0_0; }
		
		//name=Ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
		
		//(':=' exp=rExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }
		
		//exp=rExpression
		public Assignment getExpAssignment_2_1() { return cExpAssignment_2_1; }
		
		//rExpression
		public RuleCall getExpRExpressionParserRuleCall_2_1_0() { return cExpRExpressionParserRuleCall_2_1_0; }
	}
	public class RAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetExpressionParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpRExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//rAssign Assign:
		//	target=expression ':=' exp=rExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//target=expression ':=' exp=rExpression
		public Group getGroup() { return cGroup; }
		
		//target=expression
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//expression
		public RuleCall getTargetExpressionParserRuleCall_0_0() { return cTargetExpressionParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exp=rExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//rExpression
		public RuleCall getExpRExpressionParserRuleCall_2_0() { return cExpRExpressionParserRuleCall_2_0; }
	}
	public class RInsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rInsert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetExpressionParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpRExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//rInsert Insert:
		//	target=expression '+=' exp=rExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//target=expression '+=' exp=rExpression
		public Group getGroup() { return cGroup; }
		
		//target=expression
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//expression
		public RuleCall getTargetExpressionParserRuleCall_0_0() { return cTargetExpressionParserRuleCall_0_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }
		
		//exp=rExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//rExpression
		public RuleCall getExpRExpressionParserRuleCall_2_0() { return cExpRExpressionParserRuleCall_2_0; }
	}
	public class RRemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rRemove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetExpressionParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpRExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//rRemove Remove:
		//	target=expression '-=' exp=rExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//target=expression '-=' exp=rExpression
		public Group getGroup() { return cGroup; }
		
		//target=expression
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//expression
		public RuleCall getTargetExpressionParserRuleCall_0_0() { return cTargetExpressionParserRuleCall_0_0; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }
		
		//exp=rExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//rExpression
		public RuleCall getExpRExpressionParserRuleCall_2_0() { return cExpRExpressionParserRuleCall_2_0; }
	}
	public class RForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIteratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIteratorIdentTerminalRuleCall_2_0 = (RuleCall)cIteratorAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCollectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCollectionRCollectionParserRuleCall_4_0 = (RuleCall)cCollectionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockRBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		
		//rForEach ForEach:
		//	'for' '(' iterator=Ident 'in' collection=rCollection ')' block=rBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' iterator=Ident 'in' collection=rCollection ')' block=rBlock
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//iterator=Ident
		public Assignment getIteratorAssignment_2() { return cIteratorAssignment_2; }
		
		//Ident
		public RuleCall getIteratorIdentTerminalRuleCall_2_0() { return cIteratorIdentTerminalRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//collection=rCollection
		public Assignment getCollectionAssignment_4() { return cCollectionAssignment_4; }
		
		//rCollection
		public RuleCall getCollectionRCollectionParserRuleCall_4_0() { return cCollectionRCollectionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//block=rBlock
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }
		
		//rBlock
		public RuleCall getBlockRBlockParserRuleCall_6_0() { return cBlockRBlockParserRuleCall_6_0; }
	}
	public class RCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rCollection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMinAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMinINTTerminalRuleCall_0_1_0 = (RuleCall)cMinAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMaxAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cMaxINTTerminalRuleCall_0_3_0 = (RuleCall)cMaxAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpRExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//rCollection Collection:
		//	'[' min=INT '..' max=INT ']' | exp=rExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' min=INT '..' max=INT ']' | exp=rExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' min=INT '..' max=INT ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//min=INT
		public Assignment getMinAssignment_0_1() { return cMinAssignment_0_1; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_0_1_0() { return cMinINTTerminalRuleCall_0_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0_2() { return cFullStopFullStopKeyword_0_2; }
		
		//max=INT
		public Assignment getMaxAssignment_0_3() { return cMaxAssignment_0_3; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_0_3_0() { return cMaxINTTerminalRuleCall_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//exp=rExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//rExpression
		public RuleCall getExpRExpressionParserRuleCall_1_0() { return cExpRExpressionParserRuleCall_1_0; }
	}
	public class RBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cStatementsRSimpleStatementParserRuleCall_2_0_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementsRBlockStatementParserRuleCall_2_0_1_0 = (RuleCall)cStatementsAssignment_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1_0_0 = (Assignment)cGroup_2_1_0.eContents().get(0);
		private final RuleCall cStatementsRSimpleStatementParserRuleCall_2_1_0_0_0 = (RuleCall)cStatementsAssignment_2_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cStatementsRBlockStatementParserRuleCall_2_1_1_0 = (RuleCall)cStatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//rBlock Block:
		//	{Block}
		//	'{' ((statements+=rSimpleStatement ';' | statements+=rBlockStatement) (statements+=rSimpleStatement ';' |
		//	statements+=rBlockStatement)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' ((statements+=rSimpleStatement ';' | statements+=rBlockStatement) (statements+=rSimpleStatement ';' |
		//statements+=rBlockStatement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//((statements+=rSimpleStatement ';' | statements+=rBlockStatement) (statements+=rSimpleStatement ';' |
		//statements+=rBlockStatement)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//statements+=rSimpleStatement ';' | statements+=rBlockStatement
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//statements+=rSimpleStatement ';'
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//statements+=rSimpleStatement
		public Assignment getStatementsAssignment_2_0_0_0() { return cStatementsAssignment_2_0_0_0; }
		
		//rSimpleStatement
		public RuleCall getStatementsRSimpleStatementParserRuleCall_2_0_0_0_0() { return cStatementsRSimpleStatementParserRuleCall_2_0_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_0_1() { return cSemicolonKeyword_2_0_0_1; }
		
		//statements+=rBlockStatement
		public Assignment getStatementsAssignment_2_0_1() { return cStatementsAssignment_2_0_1; }
		
		//rBlockStatement
		public RuleCall getStatementsRBlockStatementParserRuleCall_2_0_1_0() { return cStatementsRBlockStatementParserRuleCall_2_0_1_0; }
		
		//(statements+=rSimpleStatement ';' | statements+=rBlockStatement)*
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//statements+=rSimpleStatement ';'
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//statements+=rSimpleStatement
		public Assignment getStatementsAssignment_2_1_0_0() { return cStatementsAssignment_2_1_0_0; }
		
		//rSimpleStatement
		public RuleCall getStatementsRSimpleStatementParserRuleCall_2_1_0_0_0() { return cStatementsRSimpleStatementParserRuleCall_2_1_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_0_1() { return cSemicolonKeyword_2_1_0_1; }
		
		//statements+=rBlockStatement
		public Assignment getStatementsAssignment_2_1_1() { return cStatementsAssignment_2_1_1; }
		
		//rBlockStatement
		public RuleCall getStatementsRBlockStatementParserRuleCall_2_1_1_0() { return cStatementsRBlockStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondRExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenRBlockParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cElseAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cElseRBlockParserRuleCall_5_1_0_0 = (RuleCall)cElseAssignment_5_1_0.eContents().get(0);
		private final Assignment cNestedIfAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cNestedIfRIfParserRuleCall_5_1_1_0 = (RuleCall)cNestedIfAssignment_5_1_1.eContents().get(0);
		
		//rIf If:
		//	'if' '(' cond=rExpression ')' then=rBlock ('else' (else=rBlock | nestedIf=rIf))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' cond=rExpression ')' then=rBlock ('else' (else=rBlock | nestedIf=rIf))?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=rExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//rExpression
		public RuleCall getCondRExpressionParserRuleCall_2_0() { return cCondRExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=rBlock
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//rBlock
		public RuleCall getThenRBlockParserRuleCall_4_0() { return cThenRBlockParserRuleCall_4_0; }
		
		//('else' (else=rBlock | nestedIf=rIf))?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=rBlock | nestedIf=rIf
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//else=rBlock
		public Assignment getElseAssignment_5_1_0() { return cElseAssignment_5_1_0; }
		
		//rBlock
		public RuleCall getElseRBlockParserRuleCall_5_1_0_0() { return cElseRBlockParserRuleCall_5_1_0_0; }
		
		//nestedIf=rIf
		public Assignment getNestedIfAssignment_5_1_1() { return cNestedIfAssignment_5_1_1; }
		
		//rIf
		public RuleCall getNestedIfRIfParserRuleCall_5_1_1_0() { return cNestedIfRIfParserRuleCall_5_1_1_0; }
	}
	public class RWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondRExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockRBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//rWhile While:
		//	'while' '(' cond=rExpression ')' block=rBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' cond=rExpression ')' block=rBlock
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=rExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//rExpression
		public RuleCall getCondRExpressionParserRuleCall_2_0() { return cCondRExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//block=rBlock
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//rBlock
		public RuleCall getBlockRBlockParserRuleCall_4_0() { return cBlockRBlockParserRuleCall_4_0; }
	}
	public class RSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamNameIdentTerminalRuleCall_2_0_0 = (RuleCall)cParamNameAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cParamValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamValRExpressionParserRuleCall_3_0 = (RuleCall)cParamValAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCasesRCaseParserRuleCall_6_0 = (RuleCall)cCasesAssignment_6.eContents().get(0);
		private final Keyword cDefaultKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOtherAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOtherRExpressionParserRuleCall_9_0 = (RuleCall)cOtherAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//rSwitch:
		//	'switch' '(' (paramName=Ident ':')? paramVal=rExpression ')' '{'
		//	cases+=rCase+
		//	'default' ':' other=rExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' '(' (paramName=Ident ':')? paramVal=rExpression ')' '{' cases+=rCase+ 'default' ':' other=rExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(paramName=Ident ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//paramName=Ident
		public Assignment getParamNameAssignment_2_0() { return cParamNameAssignment_2_0; }
		
		//Ident
		public RuleCall getParamNameIdentTerminalRuleCall_2_0_0() { return cParamNameIdentTerminalRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//paramVal=rExpression
		public Assignment getParamValAssignment_3() { return cParamValAssignment_3; }
		
		//rExpression
		public RuleCall getParamValRExpressionParserRuleCall_3_0() { return cParamValRExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//cases+=rCase+
		public Assignment getCasesAssignment_6() { return cCasesAssignment_6; }
		
		//rCase
		public RuleCall getCasesRCaseParserRuleCall_6_0() { return cCasesRCaseParserRuleCall_6_0; }
		
		//'default'
		public Keyword getDefaultKeyword_7() { return cDefaultKeyword_7; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//other=rExpression
		public Assignment getOtherAssignment_9() { return cOtherAssignment_9; }
		
		//rExpression
		public RuleCall getOtherRExpressionParserRuleCall_9_0() { return cOtherRExpressionParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class RCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGuardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGuardRTypeParserRuleCall_0_0 = (RuleCall)cGuardAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMatchAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMatchRExpressionParserRuleCall_1_1_0 = (RuleCall)cMatchAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueRExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//rCase:
		//	guard=rType? ('case' match=rExpression)? ':' value=rExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//guard=rType? ('case' match=rExpression)? ':' value=rExpression
		public Group getGroup() { return cGroup; }
		
		//guard=rType?
		public Assignment getGuardAssignment_0() { return cGuardAssignment_0; }
		
		//rType
		public RuleCall getGuardRTypeParserRuleCall_0_0() { return cGuardRTypeParserRuleCall_0_0; }
		
		//('case' match=rExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }
		
		//match=rExpression
		public Assignment getMatchAssignment_1_1() { return cMatchAssignment_1_1; }
		
		//rExpression
		public RuleCall getMatchRExpressionParserRuleCall_1_1_0() { return cMatchRExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=rExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//rExpression
		public RuleCall getValueRExpressionParserRuleCall_3_0() { return cValueRExpressionParserRuleCall_3_0; }
	}
	public class RExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rExpression");
		private final Assignment cExpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cExpAlternatives_0 = (Alternatives)cExpAssignment.eContents().get(0);
		private final RuleCall cExpRSwitchParserRuleCall_0_0 = (RuleCall)cExpAlternatives_0.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_1 = (RuleCall)cExpAlternatives_0.eContents().get(1);
		
		//rExpression ExpressionStmt:
		//	exp=(rSwitch | expression);
		@Override public ParserRule getRule() { return rule; }
		
		//exp=(rSwitch | expression)
		public Assignment getExpAssignment() { return cExpAssignment; }
		
		//(rSwitch | expression)
		public Alternatives getExpAlternatives_0() { return cExpAlternatives_0; }
		
		//rSwitch
		public RuleCall getExpRSwitchParserRuleCall_0_0() { return cExpRSwitchParserRuleCall_0_0; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_0_1() { return cExpExpressionParserRuleCall_0_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonLeftRecExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cCallTargetAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIdentTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Assignment cParamsAssignment_1_0_4_0 = (Assignment)cGroup_1_0_4.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_0_4_0_0 = (RuleCall)cParamsAssignment_1_0_4_0.eContents().get(0);
		private final Group cGroup_1_0_4_1 = (Group)cGroup_1_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_4_1_0 = (Keyword)cGroup_1_0_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_4_1_1 = (Assignment)cGroup_1_0_4_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_0_4_1_1_0 = (RuleCall)cParamsAssignment_1_0_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cFeatureTargetAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFeatureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFeatureIdentTerminalRuleCall_1_1_2_0 = (RuleCall)cFeatureAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cApplyTargetAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Alternatives cAlternatives_1_2_2 = (Alternatives)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_2_0 = (Group)cAlternatives_1_2_2.eContents().get(0);
		private final Assignment cNameAssignment_1_2_2_0_0 = (Assignment)cGroup_1_2_2_0.eContents().get(0);
		private final RuleCall cNameCollectionIteratorParserRuleCall_1_2_2_0_0_0 = (RuleCall)cNameAssignment_1_2_2_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_2_0_1 = (Keyword)cGroup_1_2_2_0.eContents().get(1);
		private final Assignment cVarNameAssignment_1_2_2_0_2 = (Assignment)cGroup_1_2_2_0.eContents().get(2);
		private final RuleCall cVarNameIdentTerminalRuleCall_1_2_2_0_2_0 = (RuleCall)cVarNameAssignment_1_2_2_0_2.eContents().get(0);
		private final Group cGroup_1_2_2_0_3 = (Group)cGroup_1_2_2_0.eContents().get(3);
		private final Keyword cColonKeyword_1_2_2_0_3_0 = (Keyword)cGroup_1_2_2_0_3.eContents().get(0);
		private final Assignment cVarTypeAssignment_1_2_2_0_3_1 = (Assignment)cGroup_1_2_2_0_3.eContents().get(1);
		private final RuleCall cVarTypeTypeLiteralParserRuleCall_1_2_2_0_3_1_0 = (RuleCall)cVarTypeAssignment_1_2_2_0_3_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_2_2_0_4 = (Keyword)cGroup_1_2_2_0.eContents().get(4);
		private final Assignment cLambdaAssignment_1_2_2_0_5 = (Assignment)cGroup_1_2_2_0.eContents().get(5);
		private final RuleCall cLambdaExpressionParserRuleCall_1_2_2_0_5_0 = (RuleCall)cLambdaAssignment_1_2_2_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2_0_6 = (Keyword)cGroup_1_2_2_0.eContents().get(6);
		private final Group cGroup_1_2_2_1 = (Group)cAlternatives_1_2_2.eContents().get(1);
		private final Assignment cNameAssignment_1_2_2_1_0 = (Assignment)cGroup_1_2_2_1.eContents().get(0);
		private final RuleCall cNameIdentTerminalRuleCall_1_2_2_1_0_0 = (RuleCall)cNameAssignment_1_2_2_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_2_1_1 = (Keyword)cGroup_1_2_2_1.eContents().get(1);
		private final Group cGroup_1_2_2_1_2 = (Group)cGroup_1_2_2_1.eContents().get(2);
		private final Assignment cParamsAssignment_1_2_2_1_2_0 = (Assignment)cGroup_1_2_2_1_2.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_2_2_1_2_0_0 = (RuleCall)cParamsAssignment_1_2_2_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_2_1_2_1 = (Group)cGroup_1_2_2_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_2_1_2_1_0 = (Keyword)cGroup_1_2_2_1_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_2_1_2_1_1 = (Assignment)cGroup_1_2_2_1_2_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_2_2_1_2_1_1_0 = (RuleCall)cParamsAssignment_1_2_2_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2_1_3 = (Keyword)cGroup_1_2_2_1.eContents().get(3);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cMultLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Assignment cOpAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOpMultOpTerminalRuleCall_1_3_1_0 = (RuleCall)cOpAssignment_1_3_1.eContents().get(0);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cAddLeftAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Assignment cOpAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cOpAddOpParserRuleCall_1_4_1_0 = (RuleCall)cOpAssignment_1_4_1.eContents().get(0);
		private final Assignment cRightAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_4_2_0 = (RuleCall)cRightAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Action cCompLeftAction_1_5_0 = (Action)cGroup_1_5.eContents().get(0);
		private final Assignment cOpAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cOpCompOpParserRuleCall_1_5_1_0 = (RuleCall)cOpAssignment_1_5_1.eContents().get(0);
		private final Assignment cRightAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_5_2_0 = (RuleCall)cRightAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Action cAndLeftAction_1_6_0 = (Action)cGroup_1_6.eContents().get(0);
		private final Keyword cAndKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cRightAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_6_2_0 = (RuleCall)cRightAssignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Action cOrLeftAction_1_7_0 = (Action)cGroup_1_7.eContents().get(0);
		private final Keyword cOrKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Assignment cRightAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_7_2_0 = (RuleCall)cRightAssignment_1_7_2.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cAlternatives_1.eContents().get(8);
		private final Action cXorLeftAction_1_8_0 = (Action)cGroup_1_8.eContents().get(0);
		private final Keyword cXorKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cRightAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_8_2_0 = (RuleCall)cRightAssignment_1_8_2.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cAlternatives_1.eContents().get(9);
		private final Action cImplieLeftAction_1_9_0 = (Action)cGroup_1_9.eContents().get(0);
		private final Keyword cImplieKeyword_1_9_1 = (Keyword)cGroup_1_9.eContents().get(1);
		private final Assignment cRightAssignment_1_9_2 = (Assignment)cGroup_1_9.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_9_2_0 = (RuleCall)cRightAssignment_1_9_2.eContents().get(0);
		
		///***************
		// * AQL grammar *
		// ***************/ expression Expression:
		//	nonLeftRecExpression ({Call.target=current} '.' name=Ident '(' (params+=expression (',' params+=expression)*)? ')'
		//	| {Feature.target=current} '.' feature=Ident
		//	| {Apply.target=current} '->' (name=collectionIterator '(' varName=Ident (':' varType=typeLiteral)? '|'
		//	lambda=expression ')' | name=Ident '(' (params+=expression (',' params+=expression)*)? ')') | {Mult.left=current}
		//	op=MultOp right=expression
		//	| {Add.left=current} op=addOp right=expression
		//	| {Comp.left=current} op=compOp right=expression
		//	| {And.left=current} 'and' right=expression
		//	| {Or.left=current} 'or' right=expression
		//	| {Xor.left=current} 'xor' right=expression
		//	| {Implie.left=current} 'implie' right=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//nonLeftRecExpression ({Call.target=current} '.' name=Ident '(' (params+=expression (',' params+=expression)*)? ')' |
		//{Feature.target=current} '.' feature=Ident | {Apply.target=current} '->' (name=collectionIterator '(' varName=Ident
		//(':' varType=typeLiteral)? '|' lambda=expression ')' | name=Ident '(' (params+=expression (',' params+=expression)*)?
		//')') | {Mult.left=current} op=MultOp right=expression | {Add.left=current} op=addOp right=expression |
		//{Comp.left=current} op=compOp right=expression | {And.left=current} 'and' right=expression | {Or.left=current} 'or'
		//right=expression | {Xor.left=current} 'xor' right=expression | {Implie.left=current} 'implie' right=expression)*
		public Group getGroup() { return cGroup; }
		
		//nonLeftRecExpression
		public RuleCall getNonLeftRecExpressionParserRuleCall_0() { return cNonLeftRecExpressionParserRuleCall_0; }
		
		//({Call.target=current} '.' name=Ident '(' (params+=expression (',' params+=expression)*)? ')' | {Feature.target=current}
		//'.' feature=Ident | {Apply.target=current} '->' (name=collectionIterator '(' varName=Ident (':' varType=typeLiteral)?
		//'|' lambda=expression ')' | name=Ident '(' (params+=expression (',' params+=expression)*)? ')') | {Mult.left=current}
		//op=MultOp right=expression | {Add.left=current} op=addOp right=expression | {Comp.left=current} op=compOp
		//right=expression | {And.left=current} 'and' right=expression | {Or.left=current} 'or' right=expression |
		//{Xor.left=current} 'xor' right=expression | {Implie.left=current} 'implie' right=expression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Call.target=current} '.' name=Ident '(' (params+=expression (',' params+=expression)*)? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Call.target=current}
		public Action getCallTargetAction_1_0_0() { return cCallTargetAction_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//name=Ident
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0_2_0() { return cNameIdentTerminalRuleCall_1_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_3() { return cLeftParenthesisKeyword_1_0_3; }
		
		//(params+=expression (',' params+=expression)*)?
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//params+=expression
		public Assignment getParamsAssignment_1_0_4_0() { return cParamsAssignment_1_0_4_0; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_1_0_4_0_0() { return cParamsExpressionParserRuleCall_1_0_4_0_0; }
		
		//(',' params+=expression)*
		public Group getGroup_1_0_4_1() { return cGroup_1_0_4_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_4_1_0() { return cCommaKeyword_1_0_4_1_0; }
		
		//params+=expression
		public Assignment getParamsAssignment_1_0_4_1_1() { return cParamsAssignment_1_0_4_1_1; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_1_0_4_1_1_0() { return cParamsExpressionParserRuleCall_1_0_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }
		
		//{Feature.target=current} '.' feature=Ident
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Feature.target=current}
		public Action getFeatureTargetAction_1_1_0() { return cFeatureTargetAction_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//feature=Ident
		public Assignment getFeatureAssignment_1_1_2() { return cFeatureAssignment_1_1_2; }
		
		//Ident
		public RuleCall getFeatureIdentTerminalRuleCall_1_1_2_0() { return cFeatureIdentTerminalRuleCall_1_1_2_0; }
		
		//{Apply.target=current} '->' (name=collectionIterator '(' varName=Ident (':' varType=typeLiteral)? '|' lambda=expression
		//')' | name=Ident '(' (params+=expression (',' params+=expression)*)? ')')
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{Apply.target=current}
		public Action getApplyTargetAction_1_2_0() { return cApplyTargetAction_1_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2_1() { return cHyphenMinusGreaterThanSignKeyword_1_2_1; }
		
		//name=collectionIterator '(' varName=Ident (':' varType=typeLiteral)? '|' lambda=expression ')' | name=Ident '('
		//(params+=expression (',' params+=expression)*)? ')'
		public Alternatives getAlternatives_1_2_2() { return cAlternatives_1_2_2; }
		
		//name=collectionIterator '(' varName=Ident (':' varType=typeLiteral)? '|' lambda=expression ')'
		public Group getGroup_1_2_2_0() { return cGroup_1_2_2_0; }
		
		//name=collectionIterator
		public Assignment getNameAssignment_1_2_2_0_0() { return cNameAssignment_1_2_2_0_0; }
		
		//collectionIterator
		public RuleCall getNameCollectionIteratorParserRuleCall_1_2_2_0_0_0() { return cNameCollectionIteratorParserRuleCall_1_2_2_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_2_0_1() { return cLeftParenthesisKeyword_1_2_2_0_1; }
		
		//varName=Ident
		public Assignment getVarNameAssignment_1_2_2_0_2() { return cVarNameAssignment_1_2_2_0_2; }
		
		//Ident
		public RuleCall getVarNameIdentTerminalRuleCall_1_2_2_0_2_0() { return cVarNameIdentTerminalRuleCall_1_2_2_0_2_0; }
		
		//(':' varType=typeLiteral)?
		public Group getGroup_1_2_2_0_3() { return cGroup_1_2_2_0_3; }
		
		//':'
		public Keyword getColonKeyword_1_2_2_0_3_0() { return cColonKeyword_1_2_2_0_3_0; }
		
		//varType=typeLiteral
		public Assignment getVarTypeAssignment_1_2_2_0_3_1() { return cVarTypeAssignment_1_2_2_0_3_1; }
		
		//typeLiteral
		public RuleCall getVarTypeTypeLiteralParserRuleCall_1_2_2_0_3_1_0() { return cVarTypeTypeLiteralParserRuleCall_1_2_2_0_3_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_2_2_0_4() { return cVerticalLineKeyword_1_2_2_0_4; }
		
		//lambda=expression
		public Assignment getLambdaAssignment_1_2_2_0_5() { return cLambdaAssignment_1_2_2_0_5; }
		
		//expression
		public RuleCall getLambdaExpressionParserRuleCall_1_2_2_0_5_0() { return cLambdaExpressionParserRuleCall_1_2_2_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_2_0_6() { return cRightParenthesisKeyword_1_2_2_0_6; }
		
		//name=Ident '(' (params+=expression (',' params+=expression)*)? ')'
		public Group getGroup_1_2_2_1() { return cGroup_1_2_2_1; }
		
		//name=Ident
		public Assignment getNameAssignment_1_2_2_1_0() { return cNameAssignment_1_2_2_1_0; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_2_2_1_0_0() { return cNameIdentTerminalRuleCall_1_2_2_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_2_1_1() { return cLeftParenthesisKeyword_1_2_2_1_1; }
		
		//(params+=expression (',' params+=expression)*)?
		public Group getGroup_1_2_2_1_2() { return cGroup_1_2_2_1_2; }
		
		//params+=expression
		public Assignment getParamsAssignment_1_2_2_1_2_0() { return cParamsAssignment_1_2_2_1_2_0; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_1_2_2_1_2_0_0() { return cParamsExpressionParserRuleCall_1_2_2_1_2_0_0; }
		
		//(',' params+=expression)*
		public Group getGroup_1_2_2_1_2_1() { return cGroup_1_2_2_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_2_1_2_1_0() { return cCommaKeyword_1_2_2_1_2_1_0; }
		
		//params+=expression
		public Assignment getParamsAssignment_1_2_2_1_2_1_1() { return cParamsAssignment_1_2_2_1_2_1_1; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_1_2_2_1_2_1_1_0() { return cParamsExpressionParserRuleCall_1_2_2_1_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_2_1_3() { return cRightParenthesisKeyword_1_2_2_1_3; }
		
		//{Mult.left=current} op=MultOp right=expression
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_3_0() { return cMultLeftAction_1_3_0; }
		
		//op=MultOp
		public Assignment getOpAssignment_1_3_1() { return cOpAssignment_1_3_1; }
		
		//MultOp
		public RuleCall getOpMultOpTerminalRuleCall_1_3_1_0() { return cOpMultOpTerminalRuleCall_1_3_1_0; }
		
		//right=expression
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_1_3_2_0() { return cRightExpressionParserRuleCall_1_3_2_0; }
		
		//{Add.left=current} op=addOp right=expression
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{Add.left=current}
		public Action getAddLeftAction_1_4_0() { return cAddLeftAction_1_4_0; }
		
		//op=addOp
		public Assignment getOpAssignment_1_4_1() { return cOpAssignment_1_4_1; }
		
		//addOp
		public RuleCall getOpAddOpParserRuleCall_1_4_1_0() { return cOpAddOpParserRuleCall_1_4_1_0; }
		
		//right=expression
		public Assignment getRightAssignment_1_4_2() { return cRightAssignment_1_4_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_1_4_2_0() { return cRightExpressionParserRuleCall_1_4_2_0; }
		
		//{Comp.left=current} op=compOp right=expression
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//{Comp.left=current}
		public Action getCompLeftAction_1_5_0() { return cCompLeftAction_1_5_0; }
		
		//op=compOp
		public Assignment getOpAssignment_1_5_1() { return cOpAssignment_1_5_1; }
		
		//compOp
		public RuleCall getOpCompOpParserRuleCall_1_5_1_0() { return cOpCompOpParserRuleCall_1_5_1_0; }
		
		//right=expression
		public Assignment getRightAssignment_1_5_2() { return cRightAssignment_1_5_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_1_5_2_0() { return cRightExpressionParserRuleCall_1_5_2_0; }
		
		//{And.left=current} 'and' right=expression
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_6_0() { return cAndLeftAction_1_6_0; }
		
		//'and'
		public Keyword getAndKeyword_1_6_1() { return cAndKeyword_1_6_1; }
		
		//right=expression
		public Assignment getRightAssignment_1_6_2() { return cRightAssignment_1_6_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_1_6_2_0() { return cRightExpressionParserRuleCall_1_6_2_0; }
		
		//{Or.left=current} 'or' right=expression
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_7_0() { return cOrLeftAction_1_7_0; }
		
		//'or'
		public Keyword getOrKeyword_1_7_1() { return cOrKeyword_1_7_1; }
		
		//right=expression
		public Assignment getRightAssignment_1_7_2() { return cRightAssignment_1_7_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_1_7_2_0() { return cRightExpressionParserRuleCall_1_7_2_0; }
		
		//{Xor.left=current} 'xor' right=expression
		public Group getGroup_1_8() { return cGroup_1_8; }
		
		//{Xor.left=current}
		public Action getXorLeftAction_1_8_0() { return cXorLeftAction_1_8_0; }
		
		//'xor'
		public Keyword getXorKeyword_1_8_1() { return cXorKeyword_1_8_1; }
		
		//right=expression
		public Assignment getRightAssignment_1_8_2() { return cRightAssignment_1_8_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_1_8_2_0() { return cRightExpressionParserRuleCall_1_8_2_0; }
		
		//{Implie.left=current} 'implie' right=expression
		public Group getGroup_1_9() { return cGroup_1_9; }
		
		//{Implie.left=current}
		public Action getImplieLeftAction_1_9_0() { return cImplieLeftAction_1_9_0; }
		
		//'implie'
		public Keyword getImplieKeyword_1_9_1() { return cImplieKeyword_1_9_1; }
		
		//right=expression
		public Assignment getRightAssignment_1_9_2() { return cRightAssignment_1_9_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_1_9_2_0() { return cRightExpressionParserRuleCall_1_9_2_0; }
	}
	public class NonLeftRecExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.nonLeftRecExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_0_2_0 = (RuleCall)cExpAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVarRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cIDAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIDIdentTerminalRuleCall_2_1_0 = (RuleCall)cIDAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLitAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_3_1_0 = (RuleCall)cLiteralAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cConditionalAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cIfKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cCondAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_5_2_0 = (RuleCall)cCondAssignment_5_2.eContents().get(0);
		private final Keyword cThenKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cThenAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cThenExpressionParserRuleCall_5_4_0 = (RuleCall)cThenAssignment_5_4.eContents().get(0);
		private final Keyword cElseKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cElseAssignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cElseExpressionParserRuleCall_5_6_0 = (RuleCall)cElseAssignment_5_6.eContents().get(0);
		private final Keyword cEndifKeyword_5_7 = (Keyword)cGroup_5.eContents().get(7);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cLetAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cLetKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cBindingsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cBindingsBindingParserRuleCall_6_2_0 = (RuleCall)cBindingsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cBindingsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_6_3_1_0 = (RuleCall)cBindingsAssignment_6_3_1.eContents().get(0);
		private final Keyword cInKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cExpAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cExpExpressionParserRuleCall_6_5_0 = (RuleCall)cExpAssignment_6_5.eContents().get(0);
		
		//nonLeftRecExpression Expression:
		//	{Not} 'not' exp=expression
		//	| {Min} '-' exp=expression
		//	| {VarRef} ID=Ident
		//	| {Lit} literal=literal
		//	| '(' expression ')'
		//	| {Conditional} 'if' cond=expression 'then' then=expression 'else' else=expression 'endif'
		//	| {Let} 'let' bindings+=binding (',' bindings+=binding)* 'in' exp=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Not} 'not' exp=expression | {Min} '-' exp=expression | {VarRef} ID=Ident | {Lit} literal=literal | '(' expression ')' |
		//{Conditional} 'if' cond=expression 'then' then=expression 'else' else=expression 'endif' | {Let} 'let'
		//bindings+=binding (',' bindings+=binding)* 'in' exp=expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Not} 'not' exp=expression
		public Group getGroup_0() { return cGroup_0; }
		
		//{Not}
		public Action getNotAction_0_0() { return cNotAction_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//exp=expression
		public Assignment getExpAssignment_0_2() { return cExpAssignment_0_2; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_0_2_0() { return cExpExpressionParserRuleCall_0_2_0; }
		
		//{Min} '-' exp=expression
		public Group getGroup_1() { return cGroup_1; }
		
		//{Min}
		public Action getMinAction_1_0() { return cMinAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//exp=expression
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_1_2_0() { return cExpExpressionParserRuleCall_1_2_0; }
		
		//{VarRef} ID=Ident
		public Group getGroup_2() { return cGroup_2; }
		
		//{VarRef}
		public Action getVarRefAction_2_0() { return cVarRefAction_2_0; }
		
		//ID=Ident
		public Assignment getIDAssignment_2_1() { return cIDAssignment_2_1; }
		
		//Ident
		public RuleCall getIDIdentTerminalRuleCall_2_1_0() { return cIDIdentTerminalRuleCall_2_1_0; }
		
		//{Lit} literal=literal
		public Group getGroup_3() { return cGroup_3; }
		
		//{Lit}
		public Action getLitAction_3_0() { return cLitAction_3_0; }
		
		//literal=literal
		public Assignment getLiteralAssignment_3_1() { return cLiteralAssignment_3_1; }
		
		//literal
		public RuleCall getLiteralLiteralParserRuleCall_3_1_0() { return cLiteralLiteralParserRuleCall_3_1_0; }
		
		//'(' expression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//{Conditional} 'if' cond=expression 'then' then=expression 'else' else=expression 'endif'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Conditional}
		public Action getConditionalAction_5_0() { return cConditionalAction_5_0; }
		
		//'if'
		public Keyword getIfKeyword_5_1() { return cIfKeyword_5_1; }
		
		//cond=expression
		public Assignment getCondAssignment_5_2() { return cCondAssignment_5_2; }
		
		//expression
		public RuleCall getCondExpressionParserRuleCall_5_2_0() { return cCondExpressionParserRuleCall_5_2_0; }
		
		//'then'
		public Keyword getThenKeyword_5_3() { return cThenKeyword_5_3; }
		
		//then=expression
		public Assignment getThenAssignment_5_4() { return cThenAssignment_5_4; }
		
		//expression
		public RuleCall getThenExpressionParserRuleCall_5_4_0() { return cThenExpressionParserRuleCall_5_4_0; }
		
		//'else'
		public Keyword getElseKeyword_5_5() { return cElseKeyword_5_5; }
		
		//else=expression
		public Assignment getElseAssignment_5_6() { return cElseAssignment_5_6; }
		
		//expression
		public RuleCall getElseExpressionParserRuleCall_5_6_0() { return cElseExpressionParserRuleCall_5_6_0; }
		
		//'endif'
		public Keyword getEndifKeyword_5_7() { return cEndifKeyword_5_7; }
		
		//{Let} 'let' bindings+=binding (',' bindings+=binding)* 'in' exp=expression
		public Group getGroup_6() { return cGroup_6; }
		
		//{Let}
		public Action getLetAction_6_0() { return cLetAction_6_0; }
		
		//'let'
		public Keyword getLetKeyword_6_1() { return cLetKeyword_6_1; }
		
		//bindings+=binding
		public Assignment getBindingsAssignment_6_2() { return cBindingsAssignment_6_2; }
		
		//binding
		public RuleCall getBindingsBindingParserRuleCall_6_2_0() { return cBindingsBindingParserRuleCall_6_2_0; }
		
		//(',' bindings+=binding)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//bindings+=binding
		public Assignment getBindingsAssignment_6_3_1() { return cBindingsAssignment_6_3_1; }
		
		//binding
		public RuleCall getBindingsBindingParserRuleCall_6_3_1_0() { return cBindingsBindingParserRuleCall_6_3_1_0; }
		
		//'in'
		public Keyword getInKeyword_6_4() { return cInKeyword_6_4; }
		
		//exp=expression
		public Assignment getExpAssignment_6_5() { return cExpAssignment_6_5; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_6_5_0() { return cExpExpressionParserRuleCall_6_5_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeLiteralParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//binding:
		//	name=Ident (':' type=typeLiteral)? '=' exp=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Ident (':' type=typeLiteral)? '=' exp=expression
		public Group getGroup() { return cGroup; }
		
		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_0_0() { return cNameIdentTerminalRuleCall_0_0; }
		
		//(':' type=typeLiteral)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=typeLiteral
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//typeLiteral
		public RuleCall getTypeTypeLiteralParserRuleCall_1_1_0() { return cTypeTypeLiteralParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//exp=expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}
	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.addOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//addOp:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class CompOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.compOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//compOp:
		//	'<='
		//	| '>='
		//	| '!='
		//	| '<>'
		//	| '='
		//	| '=='
		//	| '<'
		//	| '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<=' | '>=' | '!=' | '<>' | '=' | '==' | '<' | '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_3() { return cLessThanSignGreaterThanSignKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_5() { return cEqualsSignEqualsSignKeyword_5; }
		
		//'<'
		public Keyword getLessThanSignKeyword_6() { return cLessThanSignKeyword_6; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class CollectionIteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.collectionIterator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRejectKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCollectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAnyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExistsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cForAllKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIsUniqueKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOneKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSortedByKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cClosureKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//collectionIterator:
		//	'select' | 'reject' | 'collect' | 'any' | 'exists' | 'forAll' | 'isUnique' | 'one' | 'sortedBy' | 'closure';
		@Override public ParserRule getRule() { return rule; }
		
		//'select' | 'reject' | 'collect' | 'any' | 'exists' | 'forAll' | 'isUnique' | 'one' | 'sortedBy' | 'closure'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'reject'
		public Keyword getRejectKeyword_1() { return cRejectKeyword_1; }
		
		//'collect'
		public Keyword getCollectKeyword_2() { return cCollectKeyword_2; }
		
		//'any'
		public Keyword getAnyKeyword_3() { return cAnyKeyword_3; }
		
		//'exists'
		public Keyword getExistsKeyword_4() { return cExistsKeyword_4; }
		
		//'forAll'
		public Keyword getForAllKeyword_5() { return cForAllKeyword_5; }
		
		//'isUnique'
		public Keyword getIsUniqueKeyword_6() { return cIsUniqueKeyword_6; }
		
		//'one'
		public Keyword getOneKeyword_7() { return cOneKeyword_7; }
		
		//'sortedBy'
		public Keyword getSortedByKeyword_8() { return cSortedByKeyword_8; }
		
		//'closure'
		public Keyword getClosureKeyword_9() { return cClosureKeyword_9; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueRealTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cTrueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cTrueKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFalseAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cFalseKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNullAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNullKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cSequenceAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cSequenceKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Assignment cParamsAssignment_6_3_0 = (Assignment)cGroup_6_3.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_6_3_0_0 = (RuleCall)cParamsAssignment_6_3_0.eContents().get(0);
		private final Group cGroup_6_3_1 = (Group)cGroup_6_3.eContents().get(1);
		private final Keyword cCommaKeyword_6_3_1_0 = (Keyword)cGroup_6_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_6_3_1_1 = (Assignment)cGroup_6_3_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_6_3_1_1_0 = (RuleCall)cParamsAssignment_6_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cOrderedSetAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cOrderedSetKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Assignment cParamsAssignment_7_3_0 = (Assignment)cGroup_7_3.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_7_3_0_0 = (RuleCall)cParamsAssignment_7_3_0.eContents().get(0);
		private final Group cGroup_7_3_1 = (Group)cGroup_7_3.eContents().get(1);
		private final Keyword cCommaKeyword_7_3_1_0 = (Keyword)cGroup_7_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_7_3_1_1 = (Assignment)cGroup_7_3_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_7_3_1_1_0 = (RuleCall)cParamsAssignment_7_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cEnumAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cColonColonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final RuleCall cIdentTerminalRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		private final Keyword cColonColonKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final RuleCall cIdentTerminalRuleCall_8_5 = (RuleCall)cGroup_8.eContents().get(5);
		private final RuleCall cTypeLiteralParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//literal:
		//	{String} value=STRING
		//	| {Int} value=INT
		//	| {Real} value=Real
		//	| {True} 'true'
		//	| {False} 'false'
		//	| {Null} 'null'
		//	| {Sequence} 'Sequence' '{' (params+=expression (',' params+=expression)*)? '}'
		//	| {OrderedSet} 'OrderedSet' '{' (params+=expression (',' params+=expression)*)? '}'
		//	| {Enum} Ident '::' Ident '::' Ident
		//	//		   | Ident '::' Ident ':'
		//	| typeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//{String} value=STRING | {Int} value=INT | {Real} value=Real | {True} 'true' | {False} 'false' | {Null} 'null' |
		//{Sequence} 'Sequence' '{' (params+=expression (',' params+=expression)*)? '}' | {OrderedSet} 'OrderedSet' '{'
		//(params+=expression (',' params+=expression)*)? '}' | {Enum} Ident '::' Ident '::' Ident //		   | Ident '::' Ident ':'
		//| typeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{String} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{String}
		public Action getStringAction_0_0() { return cStringAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{Int} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{Int}
		public Action getIntAction_1_0() { return cIntAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{Real} value=Real
		public Group getGroup_2() { return cGroup_2; }
		
		//{Real}
		public Action getRealAction_2_0() { return cRealAction_2_0; }
		
		//value=Real
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Real
		public RuleCall getValueRealTerminalRuleCall_2_1_0() { return cValueRealTerminalRuleCall_2_1_0; }
		
		//{True} 'true'
		public Group getGroup_3() { return cGroup_3; }
		
		//{True}
		public Action getTrueAction_3_0() { return cTrueAction_3_0; }
		
		//'true'
		public Keyword getTrueKeyword_3_1() { return cTrueKeyword_3_1; }
		
		//{False} 'false'
		public Group getGroup_4() { return cGroup_4; }
		
		//{False}
		public Action getFalseAction_4_0() { return cFalseAction_4_0; }
		
		//'false'
		public Keyword getFalseKeyword_4_1() { return cFalseKeyword_4_1; }
		
		//{Null} 'null'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Null}
		public Action getNullAction_5_0() { return cNullAction_5_0; }
		
		//'null'
		public Keyword getNullKeyword_5_1() { return cNullKeyword_5_1; }
		
		//{Sequence} 'Sequence' '{' (params+=expression (',' params+=expression)*)? '}'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Sequence}
		public Action getSequenceAction_6_0() { return cSequenceAction_6_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_6_1() { return cSequenceKeyword_6_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_2() { return cLeftCurlyBracketKeyword_6_2; }
		
		//(params+=expression (',' params+=expression)*)?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//params+=expression
		public Assignment getParamsAssignment_6_3_0() { return cParamsAssignment_6_3_0; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_6_3_0_0() { return cParamsExpressionParserRuleCall_6_3_0_0; }
		
		//(',' params+=expression)*
		public Group getGroup_6_3_1() { return cGroup_6_3_1; }
		
		//','
		public Keyword getCommaKeyword_6_3_1_0() { return cCommaKeyword_6_3_1_0; }
		
		//params+=expression
		public Assignment getParamsAssignment_6_3_1_1() { return cParamsAssignment_6_3_1_1; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_6_3_1_1_0() { return cParamsExpressionParserRuleCall_6_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//{OrderedSet} 'OrderedSet' '{' (params+=expression (',' params+=expression)*)? '}'
		public Group getGroup_7() { return cGroup_7; }
		
		//{OrderedSet}
		public Action getOrderedSetAction_7_0() { return cOrderedSetAction_7_0; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_7_1() { return cOrderedSetKeyword_7_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_2() { return cLeftCurlyBracketKeyword_7_2; }
		
		//(params+=expression (',' params+=expression)*)?
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//params+=expression
		public Assignment getParamsAssignment_7_3_0() { return cParamsAssignment_7_3_0; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_7_3_0_0() { return cParamsExpressionParserRuleCall_7_3_0_0; }
		
		//(',' params+=expression)*
		public Group getGroup_7_3_1() { return cGroup_7_3_1; }
		
		//','
		public Keyword getCommaKeyword_7_3_1_0() { return cCommaKeyword_7_3_1_0; }
		
		//params+=expression
		public Assignment getParamsAssignment_7_3_1_1() { return cParamsAssignment_7_3_1_1; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_7_3_1_1_0() { return cParamsExpressionParserRuleCall_7_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//{Enum} Ident '::' Ident '::' Ident
		public Group getGroup_8() { return cGroup_8; }
		
		//{Enum}
		public Action getEnumAction_8_0() { return cEnumAction_8_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_8_1() { return cIdentTerminalRuleCall_8_1; }
		
		//'::'
		public Keyword getColonColonKeyword_8_2() { return cColonColonKeyword_8_2; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_8_3() { return cIdentTerminalRuleCall_8_3; }
		
		//'::'
		public Keyword getColonColonKeyword_8_4() { return cColonColonKeyword_8_4; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_8_5() { return cIdentTerminalRuleCall_8_5; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_9() { return cTypeLiteralParserRuleCall_9; }
	}
	public class TypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.typeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStringKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntegerKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRealKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBooleanKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSeqTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSequenceKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cTypeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cTypeTypeLiteralParserRuleCall_4_3_0 = (RuleCall)cTypeAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSetTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cOrderedSetKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cTypeAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cTypeTypeLiteralParserRuleCall_5_3_0 = (RuleCall)cTypeAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cClassifierTypeRuleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cClassifierSetTypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTypesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cTypesClassifierTypeRuleParserRuleCall_7_2_0 = (RuleCall)cTypesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cVerticalLineKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cTypesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cTypesClassifierTypeRuleParserRuleCall_7_3_1_0 = (RuleCall)cTypesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//typeLiteral:
		//	{StringType} 'String'
		//	| {IntType} 'Integer'
		//	| {RealType} 'Real'
		//	| {BoolType} 'Boolean'
		//	| {SeqType} 'Sequence' '(' type=typeLiteral ')'
		//	| {SetType} 'OrderedSet' '(' type=typeLiteral ')'
		//	| classifierTypeRule
		//	| {ClassifierSetType} '{' types+=classifierTypeRule ('|' types+=classifierTypeRule)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} 'String' | {IntType} 'Integer' | {RealType} 'Real' | {BoolType} 'Boolean' | {SeqType} 'Sequence' '('
		//type=typeLiteral ')' | {SetType} 'OrderedSet' '(' type=typeLiteral ')' | classifierTypeRule | {ClassifierSetType} '{'
		//types+=classifierTypeRule ('|' types+=classifierTypeRule)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringType} 'String'
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringType}
		public Action getStringTypeAction_0_0() { return cStringTypeAction_0_0; }
		
		//'String'
		public Keyword getStringKeyword_0_1() { return cStringKeyword_0_1; }
		
		//{IntType} 'Integer'
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntType}
		public Action getIntTypeAction_1_0() { return cIntTypeAction_1_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1_1() { return cIntegerKeyword_1_1; }
		
		//{RealType} 'Real'
		public Group getGroup_2() { return cGroup_2; }
		
		//{RealType}
		public Action getRealTypeAction_2_0() { return cRealTypeAction_2_0; }
		
		//'Real'
		public Keyword getRealKeyword_2_1() { return cRealKeyword_2_1; }
		
		//{BoolType} 'Boolean'
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolType}
		public Action getBoolTypeAction_3_0() { return cBoolTypeAction_3_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_3_1() { return cBooleanKeyword_3_1; }
		
		//{SeqType} 'Sequence' '(' type=typeLiteral ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{SeqType}
		public Action getSeqTypeAction_4_0() { return cSeqTypeAction_4_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_4_1() { return cSequenceKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//type=typeLiteral
		public Assignment getTypeAssignment_4_3() { return cTypeAssignment_4_3; }
		
		//typeLiteral
		public RuleCall getTypeTypeLiteralParserRuleCall_4_3_0() { return cTypeTypeLiteralParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{SetType} 'OrderedSet' '(' type=typeLiteral ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{SetType}
		public Action getSetTypeAction_5_0() { return cSetTypeAction_5_0; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_5_1() { return cOrderedSetKeyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//type=typeLiteral
		public Assignment getTypeAssignment_5_3() { return cTypeAssignment_5_3; }
		
		//typeLiteral
		public RuleCall getTypeTypeLiteralParserRuleCall_5_3_0() { return cTypeTypeLiteralParserRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//classifierTypeRule
		public RuleCall getClassifierTypeRuleParserRuleCall_6() { return cClassifierTypeRuleParserRuleCall_6; }
		
		//{ClassifierSetType} '{' types+=classifierTypeRule ('|' types+=classifierTypeRule)* '}'
		public Group getGroup_7() { return cGroup_7; }
		
		//{ClassifierSetType}
		public Action getClassifierSetTypeAction_7_0() { return cClassifierSetTypeAction_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//types+=classifierTypeRule
		public Assignment getTypesAssignment_7_2() { return cTypesAssignment_7_2; }
		
		//classifierTypeRule
		public RuleCall getTypesClassifierTypeRuleParserRuleCall_7_2_0() { return cTypesClassifierTypeRuleParserRuleCall_7_2_0; }
		
		//('|' types+=classifierTypeRule)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_7_3_0() { return cVerticalLineKeyword_7_3_0; }
		
		//types+=classifierTypeRule
		public Assignment getTypesAssignment_7_3_1() { return cTypesAssignment_7_3_1; }
		
		//classifierTypeRule
		public RuleCall getTypesClassifierTypeRuleParserRuleCall_7_3_1_0() { return cTypesClassifierTypeRuleParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
	}
	public class ClassifierTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.classifierTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassifierTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameIdentTerminalRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNameIdentTerminalRuleCall_3_0 = (RuleCall)cClassNameAssignment_3.eContents().get(0);
		
		//classifierTypeRule:
		//	{ClassifierType} packageName=Ident '::' className=Ident
		//	//				     | Ident ':' 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassifierType} packageName=Ident '::' className=Ident
		public Group getGroup() { return cGroup; }
		
		//{ClassifierType}
		public Action getClassifierTypeAction_0() { return cClassifierTypeAction_0; }
		
		//packageName=Ident
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//Ident
		public RuleCall getPackageNameIdentTerminalRuleCall_1_0() { return cPackageNameIdentTerminalRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//className=Ident
		public Assignment getClassNameAssignment_3() { return cClassNameAssignment_3; }
		
		//Ident
		public RuleCall getClassNameIdentTerminalRuleCall_3_0() { return cClassNameIdentTerminalRuleCall_3_0; }
	}
	public class RTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameRQIdentParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//rType:
		//	typeLiteral | name=rQIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//typeLiteral | name=rQIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_0() { return cTypeLiteralParserRuleCall_0; }
		
		//name=rQIdent
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//rQIdent
		public RuleCall getNameRQIdentParserRuleCall_1_0() { return cNameRQIdentParserRuleCall_1_0; }
	}
	public class RQIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rQIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//rQIdent:
		//	Ident ('::' Ident)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Ident ('::' Ident)*
		public Group getGroup() { return cGroup; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_0() { return cIdentTerminalRuleCall_0; }
		
		//('::' Ident)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1_1() { return cIdentTerminalRuleCall_1_1; }
	}
	public class RQualifiedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.rQualified");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//rQualified:
		//	Ident ('.' Ident)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Ident ('.' Ident)*
		public Group getGroup() { return cGroup; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_0() { return cIdentTerminalRuleCall_0; }
		
		//('.' Ident)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1_1() { return cIdentTerminalRuleCall_1_1; }
	}
	
	
	private final RRootElements pRRoot;
	private final RImportElements pRImport;
	private final RServiceElements pRService;
	private final RClassElements pRClass;
	private final ROpenClassElements pROpenClass;
	private final RNewClassElements pRNewClass;
	private final ROperationElements pROperation;
	private final RTagElements pRTag;
	private final RVariableElements pRVariable;
	private final RAttributeElements pRAttribute;
	private final RCardinalityElements pRCardinality;
	private final ROppositeElements pROpposite;
	private final RSimpleStatementElements pRSimpleStatement;
	private final RBlockStatementElements pRBlockStatement;
	private final RVarDeclElements pRVarDecl;
	private final RAssignElements pRAssign;
	private final RInsertElements pRInsert;
	private final RRemoveElements pRRemove;
	private final RForEachElements pRForEach;
	private final RCollectionElements pRCollection;
	private final RBlockElements pRBlock;
	private final RIfElements pRIf;
	private final RWhileElements pRWhile;
	private final RSwitchElements pRSwitch;
	private final RCaseElements pRCase;
	private final RExpressionElements pRExpression;
	private final ExpressionElements pExpression;
	private final NonLeftRecExpressionElements pNonLeftRecExpression;
	private final BindingElements pBinding;
	private final AddOpElements pAddOp;
	private final CompOpElements pCompOp;
	private final CollectionIteratorElements pCollectionIterator;
	private final LiteralElements pLiteral;
	private final TypeLiteralElements pTypeLiteral;
	private final ClassifierTypeRuleElements pClassifierTypeRule;
	private final RTypeElements pRType;
	private final RQIdentElements pRQIdent;
	private final RQualifiedElements pRQualified;
	private final TerminalRule tMultOp;
	private final TerminalRule tReal;
	private final TerminalRule tIdent;
	private final TerminalRule tLetter;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRRoot = new RRootElements();
		this.pRImport = new RImportElements();
		this.pRService = new RServiceElements();
		this.pRClass = new RClassElements();
		this.pROpenClass = new ROpenClassElements();
		this.pRNewClass = new RNewClassElements();
		this.pROperation = new ROperationElements();
		this.pRTag = new RTagElements();
		this.pRVariable = new RVariableElements();
		this.pRAttribute = new RAttributeElements();
		this.pRCardinality = new RCardinalityElements();
		this.pROpposite = new ROppositeElements();
		this.pRSimpleStatement = new RSimpleStatementElements();
		this.pRBlockStatement = new RBlockStatementElements();
		this.pRVarDecl = new RVarDeclElements();
		this.pRAssign = new RAssignElements();
		this.pRInsert = new RInsertElements();
		this.pRRemove = new RRemoveElements();
		this.pRForEach = new RForEachElements();
		this.pRCollection = new RCollectionElements();
		this.pRBlock = new RBlockElements();
		this.pRIf = new RIfElements();
		this.pRWhile = new RWhileElements();
		this.pRSwitch = new RSwitchElements();
		this.pRCase = new RCaseElements();
		this.pRExpression = new RExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pNonLeftRecExpression = new NonLeftRecExpressionElements();
		this.pBinding = new BindingElements();
		this.pAddOp = new AddOpElements();
		this.pCompOp = new CompOpElements();
		this.pCollectionIterator = new CollectionIteratorElements();
		this.pLiteral = new LiteralElements();
		this.pTypeLiteral = new TypeLiteralElements();
		this.pClassifierTypeRule = new ClassifierTypeRuleElements();
		this.pRType = new RTypeElements();
		this.pRQIdent = new RQIdentElements();
		this.pRQualified = new RQualifiedElements();
		this.tMultOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.MultOp");
		this.tReal = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.Real");
		this.tIdent = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.Ident");
		this.tLetter = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.Letter");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.emf.ecoretools.Ale.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.emf.ecoretools.Ale".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*****************
	// *  ALE grammar  *
	// *****************/ rRoot Unit:
	//	'behavior' name=rQualified ';' imports+=rImport* services+=rService* xtendedClasses+=rClass*;
	public RRootElements getRRootAccess() {
		return pRRoot;
	}
	
	public ParserRule getRRootRule() {
		return getRRootAccess().getRule();
	}
	
	//rImport Import:
	//	'import' name=rQualified 'as' alias=Ident ';';
	public RImportElements getRImportAccess() {
		return pRImport;
	}
	
	public ParserRule getRImportRule() {
		return getRImportAccess().getRule();
	}
	
	//rService Service:
	//	'use' name=rQualified ';';
	public RServiceElements getRServiceAccess() {
		return pRService;
	}
	
	public ParserRule getRServiceRule() {
		return getRServiceAccess().getRule();
	}
	
	//rClass BehavioredClass:
	//	rOpenClass | rNewClass;
	public RClassElements getRClassAccess() {
		return pRClass;
	}
	
	public ParserRule getRClassRule() {
		return getRClassAccess().getRule();
	}
	
	//rOpenClass ExtendedClass:
	//	'open' 'class' name=rQualified ('extends' extends+=rQualified (',' extends+=rQualified)*)? '{' attributes+=rAttribute*
	//	operations+=rOperation* '}';
	public ROpenClassElements getROpenClassAccess() {
		return pROpenClass;
	}
	
	public ParserRule getROpenClassRule() {
		return getROpenClassAccess().getRule();
	}
	
	//rNewClass RuntimeClass:
	//	'class' name=Ident '{' attributes+=rAttribute* operations+=rOperation* '}';
	public RNewClassElements getRNewClassAccess() {
		return pRNewClass;
	}
	
	public ParserRule getRNewClassRule() {
		return getRNewClassAccess().getRule();
	}
	
	//rOperation Operation:
	//	tag+=rTag* ('def' | 'override') type=rType name=Ident '(' (params+=rVariable (',' params+=rVariable)*)? ')'
	//	body=rBlock;
	public ROperationElements getROperationAccess() {
		return pROperation;
	}
	
	public ParserRule getROperationRule() {
		return getROperationAccess().getRule();
	}
	
	//rTag Tag:
	//	'@' name=Ident;
	public RTagElements getRTagAccess() {
		return pRTag;
	}
	
	public ParserRule getRTagRule() {
		return getRTagAccess().getRule();
	}
	
	//rVariable Variable:
	//	type=rType name=Ident;
	public RVariableElements getRVariableAccess() {
		return pRVariable;
	}
	
	public ParserRule getRVariableRule() {
		return getRVariableAccess().getRule();
	}
	
	//rAttribute Attribute:
	//	modifier=('contains' | 'unique')? bounds=rCardinality? opposite=rOpposite? type=rType name=Ident (':='
	//	exp=rExpression)? ';';
	public RAttributeElements getRAttributeAccess() {
		return pRAttribute;
	}
	
	public ParserRule getRAttributeRule() {
		return getRAttributeAccess().getRule();
	}
	
	//rCardinality:
	//	INT '..' (INT | MultOp);
	public RCardinalityElements getRCardinalityAccess() {
		return pRCardinality;
	}
	
	public ParserRule getRCardinalityRule() {
		return getRCardinalityAccess().getRule();
	}
	
	//rOpposite:
	//	'opposite' name=Ident;
	public ROppositeElements getROppositeAccess() {
		return pROpposite;
	}
	
	public ParserRule getROppositeRule() {
		return getROppositeAccess().getRule();
	}
	
	//rSimpleStatement Statement:
	//	rVarDecl
	//	| rAssign
	//	| rInsert
	//	| rRemove
	//	| rExpression;
	public RSimpleStatementElements getRSimpleStatementAccess() {
		return pRSimpleStatement;
	}
	
	public ParserRule getRSimpleStatementRule() {
		return getRSimpleStatementAccess().getRule();
	}
	
	//rBlockStatement Statement:
	//	rForEach
	//	| rWhile
	//	| rIf;
	public RBlockStatementElements getRBlockStatementAccess() {
		return pRBlockStatement;
	}
	
	public ParserRule getRBlockStatementRule() {
		return getRBlockStatementAccess().getRule();
	}
	
	//rVarDecl VarDecl:
	//	type=rType name=Ident (':=' exp=rExpression)?;
	public RVarDeclElements getRVarDeclAccess() {
		return pRVarDecl;
	}
	
	public ParserRule getRVarDeclRule() {
		return getRVarDeclAccess().getRule();
	}
	
	//rAssign Assign:
	//	target=expression ':=' exp=rExpression;
	public RAssignElements getRAssignAccess() {
		return pRAssign;
	}
	
	public ParserRule getRAssignRule() {
		return getRAssignAccess().getRule();
	}
	
	//rInsert Insert:
	//	target=expression '+=' exp=rExpression;
	public RInsertElements getRInsertAccess() {
		return pRInsert;
	}
	
	public ParserRule getRInsertRule() {
		return getRInsertAccess().getRule();
	}
	
	//rRemove Remove:
	//	target=expression '-=' exp=rExpression;
	public RRemoveElements getRRemoveAccess() {
		return pRRemove;
	}
	
	public ParserRule getRRemoveRule() {
		return getRRemoveAccess().getRule();
	}
	
	//rForEach ForEach:
	//	'for' '(' iterator=Ident 'in' collection=rCollection ')' block=rBlock;
	public RForEachElements getRForEachAccess() {
		return pRForEach;
	}
	
	public ParserRule getRForEachRule() {
		return getRForEachAccess().getRule();
	}
	
	//rCollection Collection:
	//	'[' min=INT '..' max=INT ']' | exp=rExpression;
	public RCollectionElements getRCollectionAccess() {
		return pRCollection;
	}
	
	public ParserRule getRCollectionRule() {
		return getRCollectionAccess().getRule();
	}
	
	//rBlock Block:
	//	{Block}
	//	'{' ((statements+=rSimpleStatement ';' | statements+=rBlockStatement) (statements+=rSimpleStatement ';' |
	//	statements+=rBlockStatement)*)?
	//	'}';
	public RBlockElements getRBlockAccess() {
		return pRBlock;
	}
	
	public ParserRule getRBlockRule() {
		return getRBlockAccess().getRule();
	}
	
	//rIf If:
	//	'if' '(' cond=rExpression ')' then=rBlock ('else' (else=rBlock | nestedIf=rIf))?;
	public RIfElements getRIfAccess() {
		return pRIf;
	}
	
	public ParserRule getRIfRule() {
		return getRIfAccess().getRule();
	}
	
	//rWhile While:
	//	'while' '(' cond=rExpression ')' block=rBlock;
	public RWhileElements getRWhileAccess() {
		return pRWhile;
	}
	
	public ParserRule getRWhileRule() {
		return getRWhileAccess().getRule();
	}
	
	//rSwitch:
	//	'switch' '(' (paramName=Ident ':')? paramVal=rExpression ')' '{'
	//	cases+=rCase+
	//	'default' ':' other=rExpression
	//	'}';
	public RSwitchElements getRSwitchAccess() {
		return pRSwitch;
	}
	
	public ParserRule getRSwitchRule() {
		return getRSwitchAccess().getRule();
	}
	
	//rCase:
	//	guard=rType? ('case' match=rExpression)? ':' value=rExpression;
	public RCaseElements getRCaseAccess() {
		return pRCase;
	}
	
	public ParserRule getRCaseRule() {
		return getRCaseAccess().getRule();
	}
	
	//rExpression ExpressionStmt:
	//	exp=(rSwitch | expression);
	public RExpressionElements getRExpressionAccess() {
		return pRExpression;
	}
	
	public ParserRule getRExpressionRule() {
		return getRExpressionAccess().getRule();
	}
	
	///***************
	// * AQL grammar *
	// ***************/ expression Expression:
	//	nonLeftRecExpression ({Call.target=current} '.' name=Ident '(' (params+=expression (',' params+=expression)*)? ')'
	//	| {Feature.target=current} '.' feature=Ident
	//	| {Apply.target=current} '->' (name=collectionIterator '(' varName=Ident (':' varType=typeLiteral)? '|'
	//	lambda=expression ')' | name=Ident '(' (params+=expression (',' params+=expression)*)? ')') | {Mult.left=current}
	//	op=MultOp right=expression
	//	| {Add.left=current} op=addOp right=expression
	//	| {Comp.left=current} op=compOp right=expression
	//	| {And.left=current} 'and' right=expression
	//	| {Or.left=current} 'or' right=expression
	//	| {Xor.left=current} 'xor' right=expression
	//	| {Implie.left=current} 'implie' right=expression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//nonLeftRecExpression Expression:
	//	{Not} 'not' exp=expression
	//	| {Min} '-' exp=expression
	//	| {VarRef} ID=Ident
	//	| {Lit} literal=literal
	//	| '(' expression ')'
	//	| {Conditional} 'if' cond=expression 'then' then=expression 'else' else=expression 'endif'
	//	| {Let} 'let' bindings+=binding (',' bindings+=binding)* 'in' exp=expression;
	public NonLeftRecExpressionElements getNonLeftRecExpressionAccess() {
		return pNonLeftRecExpression;
	}
	
	public ParserRule getNonLeftRecExpressionRule() {
		return getNonLeftRecExpressionAccess().getRule();
	}
	
	//binding:
	//	name=Ident (':' type=typeLiteral)? '=' exp=expression;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//addOp:
	//	'+' | '-';
	public AddOpElements getAddOpAccess() {
		return pAddOp;
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}
	
	//compOp:
	//	'<='
	//	| '>='
	//	| '!='
	//	| '<>'
	//	| '='
	//	| '=='
	//	| '<'
	//	| '>';
	public CompOpElements getCompOpAccess() {
		return pCompOp;
	}
	
	public ParserRule getCompOpRule() {
		return getCompOpAccess().getRule();
	}
	
	//collectionIterator:
	//	'select' | 'reject' | 'collect' | 'any' | 'exists' | 'forAll' | 'isUnique' | 'one' | 'sortedBy' | 'closure';
	public CollectionIteratorElements getCollectionIteratorAccess() {
		return pCollectionIterator;
	}
	
	public ParserRule getCollectionIteratorRule() {
		return getCollectionIteratorAccess().getRule();
	}
	
	//literal:
	//	{String} value=STRING
	//	| {Int} value=INT
	//	| {Real} value=Real
	//	| {True} 'true'
	//	| {False} 'false'
	//	| {Null} 'null'
	//	| {Sequence} 'Sequence' '{' (params+=expression (',' params+=expression)*)? '}'
	//	| {OrderedSet} 'OrderedSet' '{' (params+=expression (',' params+=expression)*)? '}'
	//	| {Enum} Ident '::' Ident '::' Ident
	//	//		   | Ident '::' Ident ':'
	//	| typeLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//typeLiteral:
	//	{StringType} 'String'
	//	| {IntType} 'Integer'
	//	| {RealType} 'Real'
	//	| {BoolType} 'Boolean'
	//	| {SeqType} 'Sequence' '(' type=typeLiteral ')'
	//	| {SetType} 'OrderedSet' '(' type=typeLiteral ')'
	//	| classifierTypeRule
	//	| {ClassifierSetType} '{' types+=classifierTypeRule ('|' types+=classifierTypeRule)* '}';
	public TypeLiteralElements getTypeLiteralAccess() {
		return pTypeLiteral;
	}
	
	public ParserRule getTypeLiteralRule() {
		return getTypeLiteralAccess().getRule();
	}
	
	//classifierTypeRule:
	//	{ClassifierType} packageName=Ident '::' className=Ident
	//	//				     | Ident ':' 
	//;
	public ClassifierTypeRuleElements getClassifierTypeRuleAccess() {
		return pClassifierTypeRule;
	}
	
	public ParserRule getClassifierTypeRuleRule() {
		return getClassifierTypeRuleAccess().getRule();
	}
	
	//rType:
	//	typeLiteral | name=rQIdent;
	public RTypeElements getRTypeAccess() {
		return pRType;
	}
	
	public ParserRule getRTypeRule() {
		return getRTypeAccess().getRule();
	}
	
	//rQIdent:
	//	Ident ('::' Ident)*;
	public RQIdentElements getRQIdentAccess() {
		return pRQIdent;
	}
	
	public ParserRule getRQIdentRule() {
		return getRQIdentAccess().getRule();
	}
	
	//rQualified:
	//	Ident ('.' Ident)*;
	public RQualifiedElements getRQualifiedAccess() {
		return pRQualified;
	}
	
	public ParserRule getRQualifiedRule() {
		return getRQualifiedAccess().getRule();
	}
	
	//terminal MultOp:
	//	'*' | '/';
	public TerminalRule getMultOpRule() {
		return tMultOp;
	}
	
	//terminal Real:
	//	'0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getRealRule() {
		return tReal;
	}
	
	//terminal Ident:
	//	(Letter | '_') (Letter | '0'..'9' | '_')*;
	public TerminalRule getIdentRule() {
		return tIdent;
	}
	
	//terminal Letter:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLetterRule() {
		return tLetter;
	}
	
	//terminal STRING:
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
