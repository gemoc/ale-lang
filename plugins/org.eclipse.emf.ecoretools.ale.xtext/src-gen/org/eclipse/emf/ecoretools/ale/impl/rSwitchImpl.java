/**
 * ******************************************************************************
 * Copyright (c) 2017 Inria and Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  *
 * Contributors:
 *     Inria - initial API and implementation
 *  *
 * generated by Xtext 2.14.0
 *  ******************************************************************************
 */
package org.eclipse.emf.ecoretools.ale.impl;

import java.lang.String;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.emf.ecoretools.ale.AlePackage;
import org.eclipse.emf.ecoretools.ale.ExpressionStmt;
import org.eclipse.emf.ecoretools.ale.rCase;
import org.eclipse.emf.ecoretools.ale.rSwitch;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>rSwitch</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.emf.ecoretools.ale.impl.rSwitchImpl#getParamName <em>Param Name</em>}</li>
 *   <li>{@link org.eclipse.emf.ecoretools.ale.impl.rSwitchImpl#getParamVal <em>Param Val</em>}</li>
 *   <li>{@link org.eclipse.emf.ecoretools.ale.impl.rSwitchImpl#getCases <em>Cases</em>}</li>
 *   <li>{@link org.eclipse.emf.ecoretools.ale.impl.rSwitchImpl#getOther <em>Other</em>}</li>
 * </ul>
 *
 * @generated
 */
public class rSwitchImpl extends MinimalEObjectImpl.Container implements rSwitch
{
  /**
   * The default value of the '{@link #getParamName() <em>Param Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParamName()
   * @generated
   * @ordered
   */
  protected static final String PARAM_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParamName() <em>Param Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParamName()
   * @generated
   * @ordered
   */
  protected String paramName = PARAM_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParamVal() <em>Param Val</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParamVal()
   * @generated
   * @ordered
   */
  protected ExpressionStmt paramVal;

  /**
   * The cached value of the '{@link #getCases() <em>Cases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCases()
   * @generated
   * @ordered
   */
  protected EList<rCase> cases;

  /**
   * The cached value of the '{@link #getOther() <em>Other</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOther()
   * @generated
   * @ordered
   */
  protected ExpressionStmt other;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected rSwitchImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlePackage.Literals.RSWITCH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getParamName()
  {
    return paramName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParamName(String newParamName)
  {
    String oldParamName = paramName;
    paramName = newParamName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.RSWITCH__PARAM_NAME, oldParamName, paramName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionStmt getParamVal()
  {
    return paramVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParamVal(ExpressionStmt newParamVal, NotificationChain msgs)
  {
    ExpressionStmt oldParamVal = paramVal;
    paramVal = newParamVal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.RSWITCH__PARAM_VAL, oldParamVal, newParamVal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParamVal(ExpressionStmt newParamVal)
  {
    if (newParamVal != paramVal)
    {
      NotificationChain msgs = null;
      if (paramVal != null)
        msgs = ((InternalEObject)paramVal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.RSWITCH__PARAM_VAL, null, msgs);
      if (newParamVal != null)
        msgs = ((InternalEObject)newParamVal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.RSWITCH__PARAM_VAL, null, msgs);
      msgs = basicSetParamVal(newParamVal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.RSWITCH__PARAM_VAL, newParamVal, newParamVal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<rCase> getCases()
  {
    if (cases == null)
    {
      cases = new EObjectContainmentEList<rCase>(rCase.class, this, AlePackage.RSWITCH__CASES);
    }
    return cases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionStmt getOther()
  {
    return other;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOther(ExpressionStmt newOther, NotificationChain msgs)
  {
    ExpressionStmt oldOther = other;
    other = newOther;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.RSWITCH__OTHER, oldOther, newOther);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOther(ExpressionStmt newOther)
  {
    if (newOther != other)
    {
      NotificationChain msgs = null;
      if (other != null)
        msgs = ((InternalEObject)other).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.RSWITCH__OTHER, null, msgs);
      if (newOther != null)
        msgs = ((InternalEObject)newOther).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.RSWITCH__OTHER, null, msgs);
      msgs = basicSetOther(newOther, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.RSWITCH__OTHER, newOther, newOther));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AlePackage.RSWITCH__PARAM_VAL:
        return basicSetParamVal(null, msgs);
      case AlePackage.RSWITCH__CASES:
        return ((InternalEList<?>)getCases()).basicRemove(otherEnd, msgs);
      case AlePackage.RSWITCH__OTHER:
        return basicSetOther(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlePackage.RSWITCH__PARAM_NAME:
        return getParamName();
      case AlePackage.RSWITCH__PARAM_VAL:
        return getParamVal();
      case AlePackage.RSWITCH__CASES:
        return getCases();
      case AlePackage.RSWITCH__OTHER:
        return getOther();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlePackage.RSWITCH__PARAM_NAME:
        setParamName((String)newValue);
        return;
      case AlePackage.RSWITCH__PARAM_VAL:
        setParamVal((ExpressionStmt)newValue);
        return;
      case AlePackage.RSWITCH__CASES:
        getCases().clear();
        getCases().addAll((Collection<? extends rCase>)newValue);
        return;
      case AlePackage.RSWITCH__OTHER:
        setOther((ExpressionStmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.RSWITCH__PARAM_NAME:
        setParamName(PARAM_NAME_EDEFAULT);
        return;
      case AlePackage.RSWITCH__PARAM_VAL:
        setParamVal((ExpressionStmt)null);
        return;
      case AlePackage.RSWITCH__CASES:
        getCases().clear();
        return;
      case AlePackage.RSWITCH__OTHER:
        setOther((ExpressionStmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.RSWITCH__PARAM_NAME:
        return PARAM_NAME_EDEFAULT == null ? paramName != null : !PARAM_NAME_EDEFAULT.equals(paramName);
      case AlePackage.RSWITCH__PARAM_VAL:
        return paramVal != null;
      case AlePackage.RSWITCH__CASES:
        return cases != null && !cases.isEmpty();
      case AlePackage.RSWITCH__OTHER:
        return other != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (paramName: ");
    result.append(paramName);
    result.append(')');
    return result.toString();
  }

} //rSwitchImpl
