/*******************************************************************************
 * Copyright (c) 2017 Inria and Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Inria - initial API and implementation
 *
 * generated by Xtext 2.14.0
 *******************************************************************************/
package org.eclipse.emf.ecoretools.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecoretools.services.AleGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AleSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AleGrammarAccess grammarAccess;
	protected AbstractElementAlias match_nonLeftRecExpression_LeftParenthesisKeyword_4_0_a;
	protected AbstractElementAlias match_nonLeftRecExpression_LeftParenthesisKeyword_4_0_p;
	protected AbstractElementAlias match_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AleGrammarAccess) access;
		match_nonLeftRecExpression_LeftParenthesisKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_nonLeftRecExpression_LeftParenthesisKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getROperationAccess().getDefKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getROperationAccess().getOverrideKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIdentRule())
			return getIdentToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal Ident : (Letter | '_') (Letter | '0'..'9' | '_')*
	 * ;
	 */
	protected String getIdentToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_nonLeftRecExpression_LeftParenthesisKeyword_4_0_a.equals(syntax))
				emit_nonLeftRecExpression_LeftParenthesisKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_nonLeftRecExpression_LeftParenthesisKeyword_4_0_p.equals(syntax))
				emit_nonLeftRecExpression_LeftParenthesisKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1.equals(syntax))
				emit_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-' exp=expression
	 *     (rule start) (ambiguity) 'if' cond=expression
	 *     (rule start) (ambiguity) 'let' bindings+=binding
	 *     (rule start) (ambiguity) 'not' exp=expression
	 *     (rule start) (ambiguity) ID=Ident
	 *     (rule start) (ambiguity) literal=literal
	 *     (rule start) (ambiguity) {Add.left=}
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Apply.target=}
	 *     (rule start) (ambiguity) {Call.target=}
	 *     (rule start) (ambiguity) {Comp.left=}
	 *     (rule start) (ambiguity) {Feature.target=}
	 *     (rule start) (ambiguity) {Implie.left=}
	 *     (rule start) (ambiguity) {Mult.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Xor.left=}
	 */
	protected void emit_nonLeftRecExpression_LeftParenthesisKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {Add.left=}
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Apply.target=}
	 *     (rule start) (ambiguity) {Call.target=}
	 *     (rule start) (ambiguity) {Comp.left=}
	 *     (rule start) (ambiguity) {Feature.target=}
	 *     (rule start) (ambiguity) {Implie.left=}
	 *     (rule start) (ambiguity) {Mult.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Xor.left=}
	 */
	protected void emit_nonLeftRecExpression_LeftParenthesisKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'def' | 'override'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type=rType
	 *     tag+=rTag (ambiguity) type=rType
	 */
	protected void emit_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
